#+TITLE: React Fiber
#+DATE: <2022-06-01 Wed 00:09>
#+FILETAGS: react

* fiber 基本工作原理

每一 react element 构造一个 fiber 节点，每个 fiber 节点是一个工作单元，一系列 fiber 节点构成一个 fiber 特殊的链表。该数据结构的优点是便于找到下次的工作单元

[[file:fiber.png]]

针对每个 fiber 节点要做三件事：

1. 将元素添加到 dom 上
2. 创建该元素 children 的 fiber 节点
3. 选择下次的工作单元

工作单元执行顺序： 执行完所有的 children，如果没有 children，则执行其兄弟节点，如果没有 children 也没有兄弟节点执行其 uncle，没有 uncle 则到 root

fiberNode 的简单结构:

#+begin_src js
const newFiber = {
  type: element.type, // 当前fiber的类型
  props: element.props, // 当前fiber的props
  parent: fiber, // 指向父级fiber节点
  dom: null, // 该fiber节点对应的dom对象
  alternate: null, // 指向上次commit的fiberNode
  effectTag: 'PLACEMENT', // commit阶段用到
  hooks: [],
};

#+end_src

每个 fiber 节点的工作完成之后，commit 整个 fiber tree 到 dom 上

函数式组件没有对应的 dom 节点, 需要调用函数拿到其 children

